The file_operations structure
-----------------------------
Defined in linux/fs.h
Holds pointers to functions defined by the driver that perform various 
operations on the device.
Each field of the structure corresponds to the address of some function 
defined byt the driver to handle a requested operation.

Example:

struct file_operations fops = {
	.read = device_read,
	.write = device_write,
	.open = device_open,
	.release = device_release
};

Registering a device
--------------------
char devices are accessed through device files, usually located in /dev.
The major number tells which driver handles which device file.
The minor number is only used by the driver itself.

Adding a driver means registering it with the kernel.
It is synonymous with assigning it a major number during the module's 
initialization.

int register_chrdev(unsigned int major, const char *name, struct file_operations *fops);
major: major number, if 0 the major number is choosen by the kernel
name: name of the device as it will appear in /proc/devices
fops: pointer to file_operations table for the driver
return: major number


If the major number is dynamically allocated by the the kernel, we can know it:
1/ the driver can print its value, then make the device file by hand
2/ read the /proc/devices file and create the device file by hand or script
3/ the driver create the device file itself using 'mknod' and 'rm'

Unregistering a device
----------------------
To prevent removing a driver used by a process through the device file, we need
to keep track of how many processes are using the module.
There is a counter tracking that. It can be accessed in /proc/modules

Use "try_module_get(THIS_MODULE)" increment the use count (in open function)
Use "module_put(THIS_MODULE)" decrement the use count (in release function)
